@doc raw"""
    GeneralLinear{n,ùîΩ} <:
        AbstractDecoratorManifold{ùîΩ}

The general linear group, that is, the group of all invertible matrices in ``ùîΩ^{n√ón}``.

The default metric is the left-``\mathrm{GL}(n)``-right-``\mathrm{O}(n)``-invariant metric
whose inner product is
```math
‚ü®X_p,Y_p‚ü©_p = ‚ü®p^{-1}X_p,p^{-1}Y_p‚ü©_\mathrm{F} = ‚ü®X_e, Y_e‚ü©_\mathrm{F},
```
where ``X_p, Y_p ‚àà T_p \mathrm{GL}(n, ùîΩ)``,
``X_e = p^{-1}X_p ‚àà ùî§ùî©(n) = T_e \mathrm{GL}(n, ùîΩ) = ùîΩ^{n√ón}`` is the corresponding
vector in the Lie algebra, and ``‚ü®‚ãÖ,‚ãÖ‚ü©_\mathrm{F}`` denotes the Frobenius inner product.

By default, tangent vectors ``X_p`` are represented with their corresponding Lie algebra
vectors ``X_e = p^{-1}X_p``.
"""
struct GeneralLinear{n,ùîΩ} <: AbstractDecoratorManifold{ùîΩ} end

function active_traits(f, ::GeneralLinear, args...)
    return merge_traits(
        IsGroupManifold(MultiplicationOperation()),
        IsEmbeddedManifold(),
        HasLeftInvariantMetric(),
        IsDefaultMetric(EuclideanMetric()),
    )
end

GeneralLinear(n, ùîΩ::AbstractNumbers=‚Ñù) = GeneralLinear{n,ùîΩ}()

function allocation_promotion_function(::GeneralLinear{n,‚ÑÇ}, f, ::Tuple) where {n}
    return complex
end

function check_point(G::GeneralLinear, p; kwargs...)
    detp = det(p)
    if iszero(detp)
        return DomainError(
            detp,
            "The matrix $(p) does not lie on $(G), since it is not invertible.",
        )
    end
    return nothing
end
check_point(::GeneralLinear, ::Identity{MultiplicationOperation}) = nothing

function check_vector(G::GeneralLinear, p, X; kwargs...)
    return nothing
end

distance(G::GeneralLinear, p, q) = norm(G, p, log(G, p, q))

embed(::GeneralLinear, p) = p
embed(::GeneralLinear, p, X) = X

@doc raw"""
    exp(G::GeneralLinear, p, X)

Compute the exponential map on the [`GeneralLinear`](@ref) group.

The exponential map is
````math
\exp_p \colon X ‚Ü¶ p \operatorname{Exp}(X^\mathrm{H}) \operatorname{Exp}(X - X^\mathrm{H}),
````

where ``\operatorname{Exp}(‚ãÖ)`` denotes the matrix exponential, and ``‚ãÖ^\mathrm{H}`` is
the conjugate transpose. [^AndruchowLarotondaRechtVarela2014][^MartinNeff2016]

[^AndruchowLarotondaRechtVarela2014]:
    > Andruchow E., Larotonda G., Recht L., and Varela A.:
    > ‚ÄúThe left invariant metric in the general linear group‚Äù,
    > Journal of Geometry and Physics 86, pp. 241-257, 2014.
    > doi: [10.1016/j.geomphys.2014.08.009](https://doi.org/10.1016/j.geomphys.2014.08.009),
    > arXiv: [1109.0520v1](https://arxiv.org/abs/1109.0520v1).
[^MartinNeff2016]:
    > Martin, R. J. and Neff, P.:
    > ‚ÄúMinimal geodesics on GL(n) for left-invariant, right-O(n)-invariant Riemannian metrics‚Äù,
    > Journal of Geometric Mechanics 8(3), pp. 323-357, 2016.
    > doi: [10.3934/jgm.2016010](https://doi.org/10.3934/jgm.2016010),
    > arXiv: [1409.7849v2](https://arxiv.org/abs/1409.7849v2).
"""
exp(::GeneralLinear, p, X)

function exp!(G::GeneralLinear, q, p, X)
    expX = exp(X)
    if isnormal(X; atol=sqrt(eps(real(eltype(X)))))
        return compose!(G, q, p, expX)
    end
    compose!(G, q, expX', exp(X - X'))
    compose!(G, q, p, q)
    return q
end
function exp!(::GeneralLinear{1}, q, p, X)
    p1 = p isa Identity ? p : p[1]
    q[1] = p1 * exp(X[1])
    return q
end
function exp!(G::GeneralLinear{2}, q, p, X)
    if isnormal(X; atol=sqrt(eps(real(eltype(X)))))
        return compose!(G, q, p, exp(SizedMatrix{2,2}(X)))
    end
    A = SizedMatrix{2,2}(X')
    B = SizedMatrix{2,2}(X) - A
    compose!(G, q, exp(A), exp(B))
    compose!(G, q, p, q)
    return q
end

function get_coordinates(
    ::GeneralLinear{n,‚Ñù},
    p,
    X,
    ::DefaultOrthonormalBasis{‚Ñù,TangentSpaceType},
) where {n}
    return vec(X)
end

function get_coordinates!(
    ::GeneralLinear{n,‚Ñù},
    X‚Å±,
    p,
    X,
    ::DefaultOrthonormalBasis{‚Ñù,TangentSpaceType},
) where {n}
    return copyto!(X‚Å±, X)
end

get_embedding(::GeneralLinear{n,ùîΩ}) where {n,ùîΩ} = Euclidean(n, n; field=ùîΩ)

function get_vector(
    ::GeneralLinear{n,‚Ñù},
    p,
    X‚Å±,
    ::DefaultOrthonormalBasis{‚Ñù,TangentSpaceType},
) where {n}
    return reshape(X‚Å±, n, n)
end

function get_vector!(
    ::GeneralLinear{n,‚Ñù},
    X,
    p,
    X‚Å±,
    ::DefaultOrthonormalBasis{‚Ñù,TangentSpaceType},
) where {n}
    return copyto!(X, X‚Å±)
end

function exp_lie!(::GeneralLinear{1}, q, X)
    q[1] = exp(X[1])
    return q
end
exp_lie!(::GeneralLinear{2}, q, X) = copyto!(q, exp(SizedMatrix{2,2}(X)))

inner(::GeneralLinear, p, X, Y) = dot(X, Y)

inverse_translate_diff(::GeneralLinear, p, q, X, ::LeftAction) = X
inverse_translate_diff(::GeneralLinear, p, q, X, ::RightAction) = p * X / p

function inverse_translate_diff!(G::GeneralLinear, Y, p, q, X, conv::ActionDirection)
    return copyto!(Y, inverse_translate_diff(G, p, q, X, conv))
end

# find sU for s ‚àà S‚Å∫ and U ‚àà U(n, ùîΩ) that minimizes ‚ÄñsU - p‚Äñ¬≤
function _project_Un_S‚Å∫(p)
    n = LinearAlgebra.checksquare(p)
    F = svd(p)
    s = mean(F.S)
    U = F.U * F.Vt
    return rmul!(U, s)
end

@doc raw"""
    log(G::GeneralLinear, p, q)

Compute the logarithmic map on the [`GeneralLinear(n)`](@ref) group.

The algorithm proceeds in two stages. First, the point ``r = p^{-1} q`` is projected to the
nearest element (under the Frobenius norm) of the direct product subgroup
``\mathrm{O}(n) √ó S^+``, whose logarithmic map is exactly computed using the matrix
logarithm. This initial tangent vector is then refined using the
[`NLSolveInverseRetraction`](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/retractions.html#ManifoldsBase.NLSolveInverseRetraction).

For `GeneralLinear(n, ‚ÑÇ)`, the logarithmic map is instead computed on the realified
supergroup `GeneralLinear(2n)` and the resulting tangent vector is then complexified.

Note that this implementation is experimental.
"""
log(::GeneralLinear, p, q)

function log!(G::GeneralLinear{n,ùîΩ}, X, p, q) where {n,ùîΩ}
    pinvq = inverse_translate(G, p, q, LeftAction())
    ùîΩ === ‚Ñù && det(pinvq) ‚â§ 0 && throw(OutOfInjectivityRadiusError())
    if isnormal(pinvq; atol=sqrt(eps(real(eltype(pinvq)))))
        log_safe!(X, pinvq)
    else
        # compute the equivalent logarithm on GL(dim(ùîΩ) * n, ‚Ñù)
        # this is significantly more stable than computing the complex algorithm
        G·µ£ = GeneralLinear(real_dimension(ùîΩ) * n, ‚Ñù)
        pinvq·µ£ = realify(pinvq, ùîΩ)
        X·µ£ = realify(X, ùîΩ)
        log_safe!(X·µ£, _project_Un_S‚Å∫(pinvq·µ£))
        inverse_retraction = NLSolveInverseRetraction(ExponentialRetraction(), X·µ£)
        inverse_retract!(G·µ£, X·µ£, Identity(G), pinvq·µ£, inverse_retraction)
        unrealify!(X, X·µ£, ùîΩ, n)
    end
    translate_diff!(G, X, p, Identity(G), X, LeftAction())
    return X
end
function log!(::GeneralLinear{1}, X, p, q)
    p1 = p isa Identity ? p : p[1]
    X[1] = log(p1 \ q[1])
    return X
end

function _log_lie!(::GeneralLinear{1}, X, p)
    X[1] = log(p[1])
    return X
end

manifold_dimension(G::GeneralLinear) = manifold_dimension(get_embedding(G))

LinearAlgebra.norm(::GeneralLinear, p, X) = norm(X)

parallel_transport_to(::GeneralLinear, p, X, q) = X

parallel_transport_to!(::GeneralLinear, Y, p, X, q) = copyto!(Y, X)

project(::GeneralLinear, p) = p
project(::GeneralLinear, p, X) = X

project!(::GeneralLinear, q, p) = copyto!(q, p)
project!(::GeneralLinear, Y, p, X) = copyto!(Y, X)

Base.show(io::IO, ::GeneralLinear{n,ùîΩ}) where {n,ùîΩ} = print(io, "GeneralLinear($n, $ùîΩ)")

translate_diff(::GeneralLinear, p, q, X, ::LeftAction) = X
translate_diff(::GeneralLinear, p, q, X, ::RightAction) = p \ X * p

function translate_diff!(G::GeneralLinear, Y, p, q, X, conv::ActionDirection)
    return copyto!(Y, translate_diff(G, p, q, X, conv))
end
